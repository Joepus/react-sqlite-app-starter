[{"/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/index.tsx":"1","/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/serviceWorker.ts":"2","/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/App.tsx":"3","/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/pages/Tab3.tsx":"4","/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/pages/Tab1.tsx":"5","/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/pages/Tab2.tsx":"6","/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/Hooks/usePermissions.ts":"7","/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/components/ExploreContainer.tsx":"8","/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/components/Test2dbs.tsx":"9","/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/components/NoEncryption.tsx":"10","/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/components/ExistingConnection.tsx":"11","/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/components/TestUpgradeVersion.tsx":"12","/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/components/TestEncryption.tsx":"13","/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/Utils/deleteDBUtil.ts":"14","/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/Utils/noEncryptionUtils.ts":"15","/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/Utils/encryptedSetUtils.ts":"16","/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/Utils/upgradeVersionUtils.ts":"17","/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/components/TestJsonImportExport.tsx":"18","/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/Utils/importJsonUtils.ts":"19","/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/Utils/base64Images.ts":"20","/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/components/CopyFromAssets.tsx":"21"},{"size":430,"mtime":1609075642573,"results":"22","hashOfConfig":"23"},{"size":5213,"mtime":1609075642575,"results":"24","hashOfConfig":"23"},{"size":3239,"mtime":1609850979296,"results":"25","hashOfConfig":"23"},{"size":672,"mtime":1609075642574,"results":"26","hashOfConfig":"23"},{"size":672,"mtime":1609075642574,"results":"27","hashOfConfig":"23"},{"size":3145,"mtime":1609851712035,"results":"28","hashOfConfig":"23"},{"size":575,"mtime":1609075642568,"results":"29","hashOfConfig":"23"},{"size":434,"mtime":1609075642570,"results":"30","hashOfConfig":"23"},{"size":4883,"mtime":1609075642571,"results":"31","hashOfConfig":"23"},{"size":5450,"mtime":1609075642570,"results":"32","hashOfConfig":"23"},{"size":4333,"mtime":1609075642570,"results":"33","hashOfConfig":"23"},{"size":6495,"mtime":1609075642573,"results":"34","hashOfConfig":"23"},{"size":6627,"mtime":1609096513396,"results":"35","hashOfConfig":"23"},{"size":442,"mtime":1609075642569,"results":"36","hashOfConfig":"23"},{"size":2611,"mtime":1609075642569,"results":"37","hashOfConfig":"23"},{"size":2215,"mtime":1609075642569,"results":"38","hashOfConfig":"23"},{"size":2987,"mtime":1609075642569,"results":"39","hashOfConfig":"23"},{"size":12549,"mtime":1609144957123,"results":"40","hashOfConfig":"23"},{"size":5799,"mtime":1609096513433,"results":"41","hashOfConfig":"23"},{"size":2672,"mtime":1609096513401,"results":"42","hashOfConfig":"23"},{"size":4793,"mtime":1609851712036,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"to1pq3",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"46"},"/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/index.tsx",[],["89","90"],"/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/serviceWorker.ts",[],"/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/App.tsx",[],"/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/pages/Tab3.tsx",[],"/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/pages/Tab1.tsx",[],"/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/pages/Tab2.tsx",[],"/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/Hooks/usePermissions.ts",[],"/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/components/ExploreContainer.tsx",[],"/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/components/Test2dbs.tsx",[],"/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/components/NoEncryption.tsx",["91","92"],"import React, { useState, useEffect } from 'react';\nimport './NoEncryption.css';\nimport { IonCard,IonCardContent } from '@ionic/react';\nimport { createTablesNoEncryption, importTwoUsers, importThreeMessages,\n        dropTablesTablesNoEncryption } from '../Utils/noEncryptionUtils';\n      \nimport { sqlite } from '../App';\nimport { SQLiteDBConnection, Result } from 'react-sqlite-hook/dist';\nimport { deleteDatabase } from '../Utils/deleteDBUtil';     \nconst NoEncryption: React.FC = () => {\n    const [log, setLog] = useState<string[]>([]);\n\n    useEffect( () => {\n        const testDatabaseNoEncryption = async (): Promise<Boolean>  => {\n            setLog((log) => log.concat(\"* Starting testDatabaseNoEncryption *\\n\"));\n    \n            // test the plugin with echo\n            let res: any = await sqlite.echo(\"Hello from echo\");\n            if(res.value !== \"Hello from echo\") return false;\n            setLog((log) => log.concat(\"> Echo successful\\n\"));\n            // create a connection for NoEncryption\n            res = await sqlite.createConnection(\"NoEncryption\");\n            if(res == null ) return false;\n            if((Object.keys(res)).includes(\"result\") && !res.result) return false;\n            setLog((log) => log.concat(\"> createConnection \" +\n                                        \" 'NoEncryption' successful\\n\"));\n            let db: SQLiteDBConnection = res; \n            // check if the databases exist \n            // and delete it for multiple successive tests\n            res = await deleteDatabase(db);         \n            // open NoEncryption\n            res = await db.open();\n            if(!res.result) return false;\n            setLog((log) => log.concat(\"> open 'NoEncryption' successful\\n\"));\n\n            // Drop tables if exists\n            res = await db.execute(dropTablesTablesNoEncryption);\n            if(res.changes.changes !== 0 &&\n                         res.changes.changes !== 1) return false;\n            setLog((log) => log.concat(\" Execute1 successful\\n\"));\n            \n            // Create tables\n            res = await db.execute(createTablesNoEncryption);\n            if(res.changes.changes !== 0 &&\n                res.changes.changes !== 1) return false;\n            setLog((log) => log.concat(\" Execute2 successful\\n\"));\n\n            // Insert two users with execute method\n            res = await db.execute(importTwoUsers);\n            if(res.changes.changes !== 2) return false;\n            setLog((log) => log.concat(\" Execute3 successful\\n\"));\n\n            // Select all Users\n            res = await db.query(\"SELECT * FROM users\");\n            if(res.values.length !== 2 ||\n            res.values[0].name !== \"Whiteley\" ||\n                        res.values[1].name !== \"Jones\") return false;\n            setLog((log) => log.concat(\" Select1 successful\\n\"));\n\n            // add one user with statement and values              \n            let sqlcmd = \"INSERT INTO users (name,email,age) VALUES (?,?,?)\";\n            let values: Array<any>  = [\"Simpson\",\"Simpson@example.com\",69];\n            res = await db.run(sqlcmd,values);\n            if(res.changes.changes !== 1 ||\n                            res.changes.lastId !== 3) return false;\n            setLog((log) => log.concat(\" Run1 successful\\n\"));\n\n            // add one user with statement              \n            sqlcmd = `INSERT INTO users (name,email,age) VALUES `+\n                            `(\"Brown\",\"Brown@example.com\",15)`;\n            res = await db.run(sqlcmd);\n            if(res.changes.changes !== 1 ||\n                        res.changes.lastId !== 4) return false;\n            setLog((log) => log.concat(\" Run2 successful\\n\"));\n\n            // Select all Users\n            res = await db.query(\"SELECT * FROM users\");\n            if(res.values.length !== 4) return false;\n            setLog((log) => log.concat(\" Select2 successful\\n\"));\n\n            // Select Users with age > 35\n            sqlcmd = \"SELECT name,email,age FROM users WHERE age > ?\";\n            values = [\"35\"];\n            res = await db.query(sqlcmd,values);\n            if(res.values.length !== 2) return false;\n            setLog((log) => log\n                    .concat(\" Select with filter on age successful\\n\"));\n\n            // Close Connection NoEncryption        \n            res = await sqlite.closeConnection(\"NoEncryption\"); \n            if(!res.result) {\n                return false; \n            }\n                    \n          return true;\n        }\n        if(sqlite.isAvailable) {\n            testDatabaseNoEncryption().then(res => {\n                if(res) {    \n                    setLog((log) => log\n                        .concat(\"\\n* The set of tests was successful *\\n\"));\n                } else {\n                    setLog((log) => log\n                        .concat(\"\\n* The set of tests failed *\\n\"));\n                }\n            });\n        } else {\n            sqlite.getPlatform().then((ret: { platform: string; })  =>  {\n                setLog((log) => log.concat(\"\\n* Not available for \" + \n                                    ret.platform + \" platform *\\n\"));\n            });         \n        }\n         \n      }, []);   \n    \n      \n  return (\n        <IonCard className=\"container-noencryption\">\n            <IonCardContent>\n                <pre>\n                    <p>{log}</p>\n                </pre>\n            </IonCardContent>\n        </IonCard>\n  );\n};\n\nexport default NoEncryption;\n","/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/components/ExistingConnection.tsx",[],"/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/components/TestUpgradeVersion.tsx",[],"/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/components/TestEncryption.tsx",[],"/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/Utils/deleteDBUtil.ts",[],"/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/Utils/noEncryptionUtils.ts",[],"/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/Utils/encryptedSetUtils.ts",[],"/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/Utils/upgradeVersionUtils.ts",[],"/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/components/TestJsonImportExport.tsx",[],"/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/Utils/importJsonUtils.ts",[],"/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/Utils/base64Images.ts",[],"/Users/queaujeanpierre/Development/publishApps/IonicReact/refactor/react-sqlite-app-starter/src/components/CopyFromAssets.tsx",["93","94","95","96","97","98"],"import React, { useState, useEffect } from 'react';\nimport './CopyFromAssets.css';\nimport { IonCard,IonCardContent } from '@ionic/react';\nimport { createTablesNoEncryption, importTwoUsers, importThreeMessages,\n        dropTablesTablesNoEncryption } from '../Utils/noEncryptionUtils';\n      \nimport { sqlite } from '../App';\nimport { SQLiteDBConnection, Result } from 'react-sqlite-hook/dist';\nimport { deleteDatabase } from '../Utils/deleteDBUtil';     \nconst CopyFromAssets: React.FC = () => {\n    const [log, setLog] = useState<string[]>([]);\n\n    useEffect( () => {\n        const testDatabaseCopyFromAssets = async (): Promise<Boolean>  => {\n            setLog((log) => log.concat(\"* Starting testDatabaseCopyFromAssets *\\n\"));\n    \n            let res: any = await sqlite.copyFromAssets();\n            if(!res.result) return false;\n            setLog((log) => log.concat(\"> copyFromAssets successful\\n\"));\n\n            // create a connection for myDB\n            res = await sqlite.createConnection(\"myDB\");\n            if(res == null ) return false;\n            if((Object.keys(res)).includes(\"result\") && !res.result) return false;\n            setLog((log) => log.concat(\"> createConnection \" +\n                                        \" 'myDb' successful\\n\"));\n            let db: SQLiteDBConnection = res; \n            res = await db.open();\n            if(!res.result) return false;\n            setLog((log) => log.concat(\"> open 'myDb' successful\\n\"));\n            // Select all Users\n            res = await db.query(\"SELECT * FROM users\");\n            console.log(`@@@ res.values.length ${res.values.length}`)\n            if(res.values.length !== 7 ||\n                res.values[0].name !== \"Whiteley\" ||\n                res.values[1].name !== \"Jones\" ||\n                res.values[2].name !== \"Simpson\" ||\n                res.values[3].name !== \"Brown\" ||\n                res.values[4].name !== \"Jackson\" ||\n                res.values[5].name !== \"Kennedy\" ||\n                res.values[6].name !== \"Bush\") return false;\n\n            setLog((log) => log.concat(\"> query 'myDb' successful\\n\"));\n\n            \n            // Close Connection MyDB        \n            res = await sqlite.closeConnection(\"myDB\"); \n            if(!res.result) {\n                return false; \n            }\n            setLog((log) => log.concat(\"> closeConnection 'myDb' successful\\n\"));\n\n            // create a connection for dbForCopy\n            res = await sqlite.createConnection(\"dbForCopy\");\n            if(res == null ) return false;\n            if((Object.keys(res)).includes(\"result\") && !res.result) return false;\n            setLog((log) => log.concat(\"> createConnection \" +\n                                        \" 'dbForCopy' successful\\n\"));\n            db = res;\n            res = await db.open();\n            if(!res.result) return false;\n            setLog((log) => log.concat(\"> open 'dbForCopy' successful\\n\"));\n            // Select all Users\n            res = await db.query(\"SELECT * FROM areas\");\n            console.log(`@@@ res.values.length ${res.values.length}`)\n            if(res.values.length !== 3 ||\n                res.values[0].name !== \"Access road\" ||\n                res.values[1].name !== \"Accessway\" ||\n                res.values[2].name !== \"Air handling system\") return false;\n\n            setLog((log) => log.concat(\"> query 'dbForCopy' successful\\n\"));\n            // Close Connection dbForCopy       \n            res = await sqlite.closeConnection(\"dbForCopy\"); \n            if(!res.result) {\n                return false; \n            }\n            setLog((log) => log.concat(\"> closeConnection 'dbForCopy' successful\\n\"));\n                    \n            setLog((log) => log\n                .concat(\"* Ending testDatabaseCopyFromAssets *\\n\"));\n\n            return true;\n        }\n        if(sqlite.isAvailable) {\n            testDatabaseCopyFromAssets().then(res => {\n                if(res) {    \n                    setLog((log) => log\n                        .concat(\"\\n* The set of tests was successful *\\n\"));\n                } else {\n                    setLog((log) => log\n                        .concat(\"\\n* The set of tests failed *\\n\"));\n                }\n            });\n        } else {\n            sqlite.getPlatform().then((ret: { platform: string; })  =>  {\n                setLog((log) => log.concat(\"\\n* Not available for \" + \n                                    ret.platform + \" platform *\\n\"));\n            });         \n        }\n         \n      }, []);   \n    \n      \n  return (\n        <IonCard className=\"container-copyfromassets\">\n            <IonCardContent>\n                <pre>\n                    <p>{log}</p>\n                </pre>\n            </IonCardContent>\n        </IonCard>\n  );\n};\n\nexport default CopyFromAssets;\n",{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","severity":1,"message":"104","line":4,"column":52,"nodeType":"105","messageId":"106","endLine":4,"endColumn":71},{"ruleId":"103","severity":1,"message":"107","line":8,"column":30,"nodeType":"105","messageId":"106","endLine":8,"endColumn":36},{"ruleId":"103","severity":1,"message":"108","line":4,"column":10,"nodeType":"105","messageId":"106","endLine":4,"endColumn":34},{"ruleId":"103","severity":1,"message":"109","line":4,"column":36,"nodeType":"105","messageId":"106","endLine":4,"endColumn":50},{"ruleId":"103","severity":1,"message":"104","line":4,"column":52,"nodeType":"105","messageId":"106","endLine":4,"endColumn":71},{"ruleId":"103","severity":1,"message":"110","line":5,"column":9,"nodeType":"105","messageId":"106","endLine":5,"endColumn":37},{"ruleId":"103","severity":1,"message":"107","line":8,"column":30,"nodeType":"105","messageId":"106","endLine":8,"endColumn":36},{"ruleId":"103","severity":1,"message":"111","line":9,"column":10,"nodeType":"105","messageId":"106","endLine":9,"endColumn":24},"no-native-reassign",["112"],"no-negated-in-lhs",["113"],"@typescript-eslint/no-unused-vars","'importThreeMessages' is defined but never used.","Identifier","unusedVar","'Result' is defined but never used.","'createTablesNoEncryption' is defined but never used.","'importTwoUsers' is defined but never used.","'dropTablesTablesNoEncryption' is defined but never used.","'deleteDatabase' is defined but never used.","no-global-assign","no-unsafe-negation"]